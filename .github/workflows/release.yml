name: Build, and Release

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build for Linux (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
          - target: i686-unknown-linux-gnu
            arch: i686
    steps:
      - uses: actions/checkout@v4
      - name: Install 32-bit C/C++ dev libraries for i686 target
        if: matrix.arch == 'i686'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-multilib g++-multilib libc6-dev-i386
          echo "Finished installing 32-bit libraries for i686"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
      - name: Build all binaries
        run: cargo build --release --target ${{ matrix.target }} --bins
      - name: Stage Linux binaries
        run: |
          echo "Starting staging for ${{ matrix.arch }} (target: ${{ matrix.target }})"
          ARCH_BIT_SUFFIX=""
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ARCH_BIT_SUFFIX="-64bit"
          elif [ "${{ matrix.arch }}" = "i686" ]; then
            ARCH_BIT_SUFFIX="-32bit"
          fi
          
          DEST_DIR="staging-linux-${{ matrix.arch }}"
          echo "Destination directory will be: $DEST_DIR"
          mkdir -p "$DEST_DIR"
          
          SOURCE_DIR="target/${{ matrix.target }}/release"
          echo "Source directory is: $SOURCE_DIR"

          echo "Listing contents of source directory '$SOURCE_DIR':"
          ls -la "$SOURCE_DIR" || echo "Warning: Source directory '$SOURCE_DIR' does not exist or is empty."

          if [ -d "$SOURCE_DIR" ]; then
            echo "Finding executable files in '$SOURCE_DIR'..."
            # Note: FOUND_FILES_IN_SUBSHELL is modified inside a subshell (due to the pipe).
            # Its value won't be directly accessible after the loop in this parent shell.
            # We rely on echos from the loop and the final ls of DEST_DIR for confirmation.
            find "$SOURCE_DIR" -maxdepth 1 -type f -executable -print0 | while IFS= read -r -d $'\\0' FILE_PATH; do # Corrected delimiter here
              # This block now executes in a subshell.
              # To get a count out, alternative methods like process substitution for the loop would be needed.
              BASENAME=$(basename "$FILE_PATH")
              echo "Found executable file: '$FILE_PATH' (basename: '$BASENAME')"
              echo "Copying '$FILE_PATH' to '$DEST_DIR/$BASENAME$ARCH_BIT_SUFFIX'"
              cp "$FILE_PATH" "$DEST_DIR/$BASENAME$ARCH_BIT_SUFFIX"
            done
            
            echo "File processing loop finished. Check 'ls -la $DEST_DIR' below to verify copied files."
          else
            echo "Error: Source directory '$SOURCE_DIR' not found for ${{ matrix.target }}."
          fi
          
          echo "Listing contents of destination directory '$DEST_DIR' after staging:"
          ls -la "$DEST_DIR" || echo "Warning: Destination directory '$DEST_DIR' is empty or could not be listed."
      - name: Upload Linux binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-${{ matrix.arch }}
          path: staging-linux-${{ matrix.arch }}/

  build-windows:
    name: Build for Windows (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-pc-windows-msvc
          override: true
      - name: Build all binaries
        run: cargo build --release --target x86_64-pc-windows-msvc --bins
      - name: Stage Windows binaries
        run: |
          mkdir staging-windows
          Get-ChildItem target/x86_64-pc-windows-msvc/release/*.exe | Copy-Item -Destination staging-windows/
      - name: Upload Windows binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: staging-windows/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - uses: actions/checkout@v4
      - name: Download Linux x86_64 binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-x86_64
          path: dist/linux-x86_64/
      - name: Download Linux i686 binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-i686
          path: dist/linux-i686/
      - name: Download Windows binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: dist/windows/
      - name: Get Cargo version
        id: get_version
        run: |
          echo "version=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)" >> $GITHUB_OUTPUT
      - uses: ncipollo/release-action@v1.13.0
        with:
          tag: ${{ steps.get_version.outputs.version }}
          name: "Minesweeper NG Generator"
          body: "Manual Release"
          artifacts: "dist/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
